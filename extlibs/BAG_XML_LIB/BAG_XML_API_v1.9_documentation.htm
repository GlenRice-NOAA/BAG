<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
   <head>   <FONT SIZE=4>         <title>BAG XML Metadata Library Version 1.9</title>       </head>
   <body> <p align="center"<b><STRONG>BAG XML Metadata Library   <BR>Version 1.9</STRONG></b></p>   
<P>
<BR>
The BAG XML
library contains C/C++ code to interface with BAG XML metadata.&nbsp;
The library is intended to provide ease in reading and writing BAG
XML metadata.<BR><BR>The library is currently under
construction and should not be considered complete.&nbsp; The library
does not handle all possible cases specified as valid in the BAG XML metdata schema.&nbsp;
The library handles only the items that are needed for Navigation Specific BAGs.
<BR>
<BR>
The library consists of the following files:
<BR>
<BR>&nbsp;&nbsp;&nbsp;&nbsp;bag_xml_meta.cpp
<BR>&nbsp;&nbsp;&nbsp;&nbsp;bag_xml_meta.hpp
<BR>&nbsp;&nbsp;&nbsp;&nbsp;bag_xml_meta.h
<BR>&nbsp;&nbsp;&nbsp;&nbsp;nv_types.h
<BR>&nbsp;&nbsp;&nbsp;&nbsp;version.h
<BR>&nbsp;&nbsp;&nbsp;&nbsp;Makefile (Linux only)
<BR>
<BR>Three sample applications and a makefile (Linux only) are also provided.  These sample applications are discussed below in the "Getting Started" section.

<BR><BR><BR>
<STRONG>
Currently available in library:
</STRONG>

    <BR><BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Get">- Methods to retreive metadata.</A>
    <BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Set">- Methods to set metadata.</A>
    <BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#DataStructures">- Metadata structures</A>
    <BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Initialize">- Methods to initialize metadata structures.</A>
    <BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Free">- Methods to free dynamically allocated memory within metadata structures.</A>
    <BR>
    &nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Print">- Methods to print metadata structures.</A>

<BR><BR><BR><BR>
<STRONG>Getting started:</STRONG>
<BR>
<BR>To retrieve individual metadata components from a BAG XML metadata string, perform the following generalized steps.
<BR>
<BR>1.  Declare one of each of the <A HREF="#DataStructures">required structures</A>.
<BR>2.  Initialize the declared <A HREF="#DataStructures">metadata structures</A> using the appropriate <A HREF="#Initialize">"init" method</A>.
<BR>3.  Call the method <A HREF="#GetAllStructures">"GetAllStructures"</A> to populate the previously declared structures.
<BR>4.  Call the individual <A href= "#Print">print methods</A> for each structure to view the contents of each structure.
<BR>5.  Call <A href= "#Get">methods to retrieve</A> language, dateStamp, metdataStandardName and metadataStandardVersion.
<BR>
<BR>See sample application 1 (sample_app_1.c) for an example of this.
<BR>
<BR>
<BR>
<BR>
<BR>To create a BAG XML metadata string from individual metadata components, perform the following generalized steps.
<BR>
<BR>1.  Declare one of each of the required <A HREF="#DataStructures">metadata structures</A>.
<BR>2.  Initialize the declared <A HREF="#DataStructures">metadata structures</A> using the appropriate <A HREF="#Initialize">"init" method</A>.
<BR>3.  Populate the <A HREF="#DataStructures">metadata structures</A>.
<BR>4.  Call the method <A HREF="#CreateXmlMetadataString">CreateXmlMetadataString</A> which will create a string from the contents of the populated structures.
<BR>
<BR>See sample application 2 (sample_app_2.c) for an example of this.
<BR>
<BR>
<BR>
<BR>
<BR>To edit an existing BAG XML metadata string, perform the following generalized steps.
<BR>
<BR>
<BR>1.  Declare <A HREF="#DataStructures">structures</A>  that will contain the edited metadata.
<BR>2.  Initialize the declared <A HREF="#DataStructures">metadata structures</A> using the appropriate <A HREF="#Initialize">"init" method</A>.
<BR>3.  Populate the structure with the "original" metadata using the appropriate "Get" method.
<BR>4.  Edit the "original" metadata contained in the structure.
<BR>5.  Call the appropriate Set method and pass to it the structure containing the edited metadata.  This will edit the BAG XML metadata string to reflect the updated metadata.
<BR>
<BR>See sample application 3 (sample_app_3.c) for an example of this.
<BR>
<BR>
<BR>
</P>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR><BR>


<!-- LIST GET METHODS -->


<STRONG>
<A NAME="Get">
Methods to retreive metadata are listed below.
</A>
</STRONG>
<BR>
<BR>To see more detailed information on a method click on the method name link.
<BR>___________________________________________________________________________________________________
<BR>
<pre>

NV_INT16 <A HREF="#GetAllStructures">GetAllStructures</A>(NV_U_CHAR * xmlString,
                          IDENTIFICATION_INFO * identificationInfo, 
                          MD_LEGAL_CONSTRAINTS * legalConstraints, 
                          MD_SECURITY_CONSTRAINTS * securityConstraints,  DATA_QUALITY_INFO * dataQuality, 
                          SPATIAL_REPRESENTATION_INFO * spatialRepresentationInfo, 
                          REFERENCE_SYSTEM_INFO * referenceSystemInfo, 
                          RESPONSIBLE_PARTY * contact );
                            
NV_INT16 <A HREF="#GetDataIdentification">GetDataIdentification</A>(NV_U_CHAR * xmlString, IDENTIFICATION_INFO * dataIdentificationInfo);

NV_INT16 <A HREF="#GetLegalConstraints">GetLegalConstraints</A>(NV_U_CHAR * xmlString, MD_LEGAL_CONSTRAINTS * legalConstraints);

NV_INT16 <A HREF="#GetSecurityConstraints">GetSecurityConstraints</A>(NV_U_CHAR * xmlString, MD_SECURITY_CONSTRAINTS * securityConstraints);

NV_INT16 <A HREF="#GetDataQualityInfo">GetDataQualityInfo</A>(NV_U_CHAR * xmlString, DATA_QUALITY_INFO * dataQuality );

NV_INT16 <A HREF="#GetReferenceSystemInfo">GetReferenceSystemInfo</A>(NV_U_CHAR * xmlString, REFERENCE_SYSTEM_INFO * referenceSystemInfo);

NV_INT16 <A HREF="#GetSpatialRepresentationInfo">GetSpatialRepresentationInfo</A>(NV_U_CHAR * xmlString, SPATIAL_REPRESENTATION_INFO * spatialRepresentationInfo);

NV_INT16 <A HREF="#GetDateStamp">GetDateStamp</A>(NV_U_CHAR * xmlString, NV_CHAR ** dateString);

NV_INT16 <A HREF="#GetLanguage">GetLanguage</A>(NV_U_CHAR * xmlString, NV_CHAR ** language); 
 
NV_INT16 <A HREF="#GetContact">GetContact</A>(NV_U_CHAR * xmlString, RESPONSIBLE_PARTY * contact);

NV_INT16 <A HREF="#GetMetadataStandardName">GetMetadataStandardName</A>(NV_U_CHAR * xmlString, NV_CHAR ** metadataStandardName);

NV_INT16 <A HREF="#GetMetadataStandardVersion">GetMetadataStandardVersion</A>(NV_U_CHAR * xmlString, NV_CHAR ** metadataStandardVersion);


</pre>

<!-- DETAILS OF GET METHODS -->
<STRONG>
Details of methods to retreive metadata are listed below.
</STRONG>
<BR>
<BR>
To see more detailed information for a method click on the method name link.
<BR>___________________________________________________________________________________________________
<pre>
<A NAME="GetAllStructures"/>

NV_INT16 GetAllStructures(NV_U_CHAR * xmlString,
                          IDENTIFICATION_INFO * identificationInfo, 
                          MD_LEGAL_CONSTRAINTS * legalConstraints, 
                          MD_SECURITY_CONSTRAINTS * securityConstraints,  DATA_QUALITY_INFO * dataQuality, 
                          SPATIAL_REPRESENTATION_INFO * spatialRepresentationInfo, 
                          REFERENCE_SYSTEM_INFO * referenceSystemInfo, 
                          RESPONSIBLE_PARTY * contact );
                          
/******************************************************************************************************
*
* Function: GetAllStructures
*
* Purpose:  Populates IDENTIFICATION_INFO,MD_LEGAL_CONSTRAINTS,MD_SECURITY_CONSTRAINTS,DATA_QUALITY_INFO,
*           SPATIAL_REPRESENTATION_INFO, REFERENCE_SYSTEM_INFO and RESPONSIBLE_PARTY strucutres with 
*           corresponding information retreived from a BAG metaadata XML string
*
* Inputs:   xmlString           - XML string from which to retreive metadata.
*           identificationInfo  - pointer to IDENTIFICATION_INFO structure to load with retrieved information.
*           legalConstraints    - pointer to MD_LEGAL_CONSTRAINTS structure to load with retrieved information.
*           securityConstraints - pointer to MD_SECURITY_CONSTRAINTS structure to load with retrieved information.
*           dataQuality         - pointer to DATA_QUALITY_INFO structure to load with retrieved information.
*           spatialRepresentationInfo - pointer to SPATIAL_REPRESENTATION_INFO structure to load with retrieved information.
*           referenceSystemInfo       - pointer to REFERENCE_SYSTEM_INFO structure to load with retrieved information.
*           contact                   - pointer to RESPONSIBLE_PARTY structure to load with retrieved information.
*
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status 1 = Successful.  
*                 -1 = Not successful 
*             
* Notes:
*           After calling this method and when the the program has completed using the dataQualityInfo, the programmer must 
*           call <A HREF="#FreeDataQualityInfo">FreeDataQualityInfo</A> to release the memory that was dynamically allocated for the dataQualityInfo structure.
*             
*
*******************************************************************************************************/

<A NAME="GetDataIdentification"/>

NV_INT16 GetDataIdentification(NV_U_CHAR * xmlString, IDENTIFICATION_INFO * dataIdentificationInfo);


/******************************************************************************************************
*
* Function: GetDataIdentification
*
* Purpose:  Populates an IDENTIFICATION_INFO structure with dataIdentificationInfo information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to convert
*           dataIdentificationInfo - pointer to IDENTIFICATION_INFO structure to load with retrieved information..
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status  1 = Successful.   
*                  -1 = Error initializing Xerces.
*                  -3 = Node  smXML:BAG_DataIdentification does not exist.
*                 -20 = An exception occurred while attempting to retrieve the dataIdentification from the given XML string.
*             
* Assumptions: Assumes that only one identificationInfo node exists although the schema allows for an unbounded number.
*
*******************************************************************************************************/

<A NAME="GetLegalConstraints"/>

NV_INT16 <A HREF="#GetLegalConstraints">GetLegalConstraints</A>(NV_U_CHAR * xmlString, MD_LEGAL_CONSTRAINTS * legalConstraints);


/******************************************************************************************************
*
* Function: GetLegalConstraints
*
* Purpose:  Populates a MD_LEGAL_CONSTRAINTS structure with smXML:MD_LegalConstraints information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to parse for information
*           legalConstraints - pointer to MD_LEGAL_CONSTRAINTS structure to load with retrieved XML.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status 1 = Successful.   
*                 -1 = Error initializing Xerces.
*                 -3 = node smXML:MD_LegalConstraints does not exist.
*                -20 = An exception occurred while attempting to retrieve the legal constraints from the given XML string.
*             
* Assumptions: Assumes that only one MD_LegalConstraints node exists.
*
*******************************************************************************************************/




<A NAME="GetSecurityConstraints"/>

NV_INT16 <A HREF="#GetSecurityConstraints">GetSecurityConstraints</A>(NV_U_CHAR * xmlString, MD_SECURITY_CONSTRAINTS * securityConstraints);

/******************************************************************************************************
*
* Function: GetSecurityConstraint
*
* Purpose:  Populates a MD_SECURITY_CONSTRAINTS structure with smXML:MD_SecurityConstraints information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to convert
*           securityConstraints -  pointer to MD_SECURITY_CONSTRAINTS structure to load with converted XML.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status  1 = Successful.
*                  -1 = Error initializing Xerces.
*                  -3 = Node smXML:MD_SecurityConstraints does not exist.
*                 -20 = An exception occurred while attempting to retrieve security constraints from the given XML string.
*             
* Assumptions: Assumes that only one MD_SecurityConstraints node exists.
*
*******************************************************************************************************/



<A NAME="GetDataQualityInfo"/>

NV_INT16 <A HREF="#GetDataQualityInfo">GetDataQualityInfo</A>(NV_U_CHAR * xmlString, DATA_QUALITY_INFO * dataQuality );


/******************************************************************************************************
*
* Function: GetDataQualityInfo
*
* Purpose:  Populates a DATA_QUALITY_INFO structure with dataQualityInfo information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to convert
*           dataQuality - pointer to DATA_QUALITY_INFO structure to load with retreived information.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status  1 = Successful.
*                  -1 = Error initializing Xerces.
*                  -3 = Node smXML:DQ_DataQuality does not exist.
*                 -20 = An exception occurred while attempting to retrieve dataQualityInfo from the given XML string.
*             
* Notes:  We assume that there is only one "dataQuality" node although the ISO schema allows for an unbounded number.
*
*         After calling this method and when the the program has completed using the dataQualityInfo, the programmer must 
*         call <A HREF="#FreeDataQualityInfo">FreeDataQualityInfo</A>  to release the memory that this function dynamically allocates.
*******************************************************************************************************/

<A NAME="GetSpatialRepresentationInfo"/>

NV_INT16 <A HREF="#GetSpatialRepresentationInfo">GetSpatialRepresentationInfo</A>(NV_U_CHAR * xmlString, SPATIAL_REPRESENTATION_INFO * spatialRepresentationInfo);

/******************************************************************************************************
*
* Function: GetSpatialRepresentationInfo
*
* Purpose:  Populates a SPATIAL_INFO structure with spatialRepresentationInfo information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to convert
*           spatialRepresentationInfo - pointer to SPATIAL_REPRESENTATION_INFO structure to load with retrieved information.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status  1 = Successful.
*                  -1 = Error initializing Xerces.
*                  -3 = Node smXML:MD_Georectified does not exist.
*                  -9 = There is a problem with the metadata supplied.  
*                       Specifically the number of axisDimensionProperties does not match the number specified by the numberOfDimensions. 
*                 -20 = An exception occurred while trying to retrieve the spatial representation info from the given XML string.
*
* Assumptions: Assumes that one and only one 'spatialRepresentationInfo" node exists although the schema allows for zero to an unbounded number.
*
*******************************************************************************************************/


<A NAME="GetReferenceSystemInfo"/>

NV_INT16 <A HREF="#GetReferenceSystemInfo">GetReferenceSystemInfo</A>(NV_U_CHAR * xmlString, REFERENCE_SYSTEM_INFO * referenceSystemInfo);

/******************************************************************************************************
*
* Function: GetReferenceSystemInfo
*
* Purpose:  Populates a REFERENCE_SYSTEM_INFO structure with referenceSystemInfo information retrieved from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string to conver
*           referenceSystemInfo - pointer to REFERENCE_SYSTEM_INFO structure to load with retrieved information.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status  1 = Successful.  
*                  -1 = Error initializing Xerces.
*                  -3 = Node smXML:MD_CRS does not exist.
*                 -20 = An exception occurred while retreiving reference system info from the given XML string.
*             
* Assumptions: Assumes that one and only one "referenceSystemInfo" node exists although the schema allows for zero to an unbounded number.
*
*******************************************************************************************************/




<A NAME="GetLanguage"/>

NV_INT16 <A HREF="#GetLanguage">GetLanguage</A>(NV_U_CHAR * xmlString, NV_CHAR ** language); 
 

/******************************************************************************************************
*
* Function: GetLanguage
*
* Purpose:  Populates a string with language information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string from which to obtain language metadata.
*           language -  character pointer to load with language.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT16 = Size of language string retrieved. 
*                 -1 = Error initializing Xerces.
*                -20 = An exception occurred while attempting to get the language value from the given XML string.
*
* Note:     Memory for "language" parameter is allocated in this method and must be freed after the method call by the programmer.
*
*******************************************************************************************************/

<A NAME="GetDateStamp"/>

NV_INT16 <A HREF="#GetDateStamp">GetDateStamp</A>(NV_U_CHAR * xmlString, NV_CHAR ** dateString);

/******************************************************************************************************
*
* Function: GetDateStamp
*
* Purpose:  Populates a string with dateStamp information retreived from a BAG metadata XML string.
* 
* Inputs:   xmlString - XML string from which to obtain language metadata.
*           dateString -  character pointer to load with dateStamp information. 
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT16  = Length of the dateString tha is being returned.
*                  -1 = Error initializing Xerces.
*                  -3 = dateStamp node does not exist in the given XML string.
*                 -20 = An exception occurred while trying to retrieve the dateStamp from the given XML string.
*             
* Note: dateString memory is allocated in this method and must be freed by the programmer.
*
*******************************************************************************************************/

<A NAME="GetContact"/>

NV_INT16 <A HREF="#GetContact">GetContact</A>(NV_U_CHAR * xmlString, RESPONSIBLE_PARTY * contact);

/******************************************************************************************************
*
* Function: GetContact
*
* Purpose:  Populates a RESPONSIBLE_PARTY structure with "contact" information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string from which to retrieve contact information. 
*           contact   - pointer to structure to load with converted XML.
*
* Outputs:  Error messages to stderr.
*
* Returns:  Status 1 = Successful.  
*                 -1 = Error initializing Xerces.
*                 -3 = No element named "contact" exists.
*                -20 = An exception occurred while trying to retrieve the contact from the given XML string.
*
* Assumptions: Assumes that only one "contact" node exists in the XML.
*
*******************************************************************************************************/


<A NAME="GetMetadataStandardName"/>

NV_INT16 <A HREF="#GetMetadataStandardName">GetMetadataStandardName</A>(NV_U_CHAR * xmlString, NV_CHAR ** metadataStandardName);

/******************************************************************************************************
*
* Function: GetMetadataStandardName
*
* Purpose:  Populates a string with metadataStandardName information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string from which to obtain metadata standard name.
*           metdataStandardName -  character pointer to load with metadata standard name.
*
* Outputs:  Error messages to stderr.
*
* Returns:  +NV_INT16 = Size of metadata standard name string retrieved. 
*                  -1 = Error initializing Xerces.
*                  -20 = An exception occurred  while attempting to retreive metadataStandardNmae from the given XML string.
*
* Note:     Memory for "metdataStandardName" parameter is allocated in this method and must be freed after the method call by the programmer.
*
*******************************************************************************************************/

<A NAME="GetMetadataStandardVersion"/>

NV_INT16 <A HREF="#GetMetadataStandardVersion">GetMetadataStandardVersion</A>(NV_U_CHAR * xmlString, NV_CHAR ** metadataStandardVersion);

/******************************************************************************************************
*
* Function: GetMetadataStandardVersion
*
* Purpose:  Populates a string with metadataStandardVersion information retreived from a BAG metadata XML string.
*
* Inputs:   xmlString - XML string from which to obtain  metadata standard version.
*           metadataStandardVersion -  character pointer to load with metadata standard version.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT16 = Size of metadata standard version string retrieved. 
*                 -1 = Error initializing Xerces.
*                -20 = An exception occurred while attempting to retreive metadataStandardVersion from the given XML string.
*
* Note:     Memory for "metdataStandardVersion" parameter is allocated in this method and must be freed after the method call by the programmer.
*
*******************************************************************************************************/
</pre>


<!-- LIST SET METHODS -->
<BR><BR><BR><BR><BR>
<BR><STRONG>
<A NAME="Set"/>
Methods to set metadata are listed below.
</STRONG>
<BR>
<BR>
To see more detailed information on amethod click on the method name link.

___________________________________________________________________________________________________
<BR>
<pre>
NV_INT32 <A HREF="#CreateXmlMetadataString">CreateXmlMetadataString</A>(IDENTIFICATION_INFO identificationInfo, 
                                  MD_LEGAL_CONSTRAINTS legalConstraints, 
                                  MD_SECURITY_CONSTRAINTS securityConstraints,  
                                  DATA_QUALITY_INFO dataQuality, 
                                  SPATIAL_REPRESENTATION_INFO spatialRepresentationInfo, 
                                  REFERENCE_SYSTEM_INFO referenceSystemInfo, 
                                  RESPONSIBLE_PARTY contact, 
                                  NV_CHAR * creationDate, 
                                  NV_U_CHAR ** xmlString);
                                  
                                  
NV_INT32 <A HREF="#SetIdentificationInfo">SetIdentificationInfo</A>(IDENTIFICATION_INFO newIdentificationInfo,  
                               NV_U_CHAR ** xmlString);   


NV_INT32 <A HREF="#SetLegalConstraints">SetLegalConstraints</A>(MD_LEGAL_CONSTRAINTS newLegalConstraints, 
                             NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetSecurityConstraints">SetSecurityConstraints</A>(MD_SECURITY_CONSTRAINTS newSecurityConstraints, 
                                NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetDataQualityInfo">SetDataQualityInfo</A>(DATA_QUALITY_INFO newDataQualityInfo,  
                            NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetSpatialRepresentationInfo">SetSpatialRepresentationInfo</A>(SPATIAL_REPRESENTATION_INFO newSpatialRepresentationInfo, 
                                      NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetReferenceSystemInfo">SetReferenceSystemInfo</A>(REFERENCE_SYSTEM_INFO newIdentificationInfo, 
                                NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetLanguage">SetLanguage</A>(NV_CHAR * newLanguage,  
                     NV_U_CHAR ** xmlString);
                     

NV_INT32 <A HREF="#SetDateStamp">SetDateStamp</A>(NV_CHAR * newDateStamp,  
                      NV_U_CHAR ** xmlString);
                     

NV_INT32 <A HREF="#SetContact">SetContact</A>(RESPONSIBLE_PARTY newContact, 
                    NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetMetadataStandardName">SetMetadataStandardName</A>(NV_CHAR * newMetadataStandardName,  
				 NV_U_CHAR ** xmlString);


NV_INT32 <A HREF="#SetMetadataStandardVersion">SetMetadataStandardVersion</A>(NV_CHAR * newMetadataStandardVersion,  
                                    NV_U_CHAR ** xmlString);


</pre>

<!-- BEGIN SET METHOD DETAILS -->
<BR><BR><BR>
<STRONG>
Details of methods to set metadata are listed below.
</STRONG>
<BR>
<BR>___________________________________________________________________________________________________
<BR><BR><BR>
<a NAME="CreateXmlMetadataString" />
<BR><BR>
 <pre>
 NV_INT32  CreateXmlMetadataString(IDENTIFICATION_INFO identificationInfo, 
                                  MD_LEGAL_CONSTRAINTS legalConstraints, 
                                  MD_SECURITY_CONSTRAINTS securityConstraints,  
                                  DATA_QUALITY_INFO dataQuality, 
                                  SPATIAL_REPRESENTATION_INFO spatialRepresentationInfo, 
                                  REFERENCE_SYSTEM_INFO referenceSystemInfo, 
                                  RESPONSIBLE_PARTY contact, 
                                  NV_CHAR * creationDate, 
                                  NV_U_CHAR ** xmlString);
                                  
                                  
/******************************************************************************************************
*
* Function:  CreateXmlMetadataString
*
* Purpose:   Converts BAG metadata structures to a well-formed, valid BAG XML metadata string.
*
* Inputs:    identificationInfo - populated structure whose contents will be used to populate "identificationInfo" node in XML metdata string.
*            legalConstraints - populated structure whose contents will be used to populate "MD_LegalConstraints" node in XML metdata string.
*            securityConstraints - populated structure whose contents will be used to populate "MD_SecurityConstraints" node in XML metdata string.
*            dataQuality - populated structure whose contents will be used to populate "dataQualityInfo" node in XML metdata string.
*            spatialRepresentationInfo - populated structure whose contents will be used to populate "spatialRepresentationInfo" node in XML metdata string.
*            referenceSystemInfo - populated structure whose contents will be used to populate "referenceSystemInfo" node in XML metdata string.
*            contact - populated structure whose contents will be used to populate "contact" nod in XML metdata string.
*            creationDate - populated string  whose contents will be used to populate "dateStamp" in XML metdata string.
*            xmlString - address of the XML string to populate.

* Outputs:   Error messages/status messages to stderr.
*
* Returns:   NV_INT32 = Length of XML string created (if successful). 
*                  -1 = Error initializing Xerces.
*                  -2 = OutOfMemoryException
*                  -3 = A DOMException occurred.
*                  -4 = DOM implementation is not supported.
*                 -10 = Document could not be made because security constraints were not specified. (Navigation specific)
*                 -11 = Document could not be made because identificationInfo node could not be created.(Required by ISO 19139)
*                 -12 = Document could not be made because contact node could not be created.(Required by ISO 19139)
*                 -13 = Document could not be made because dataQualityInfo could not be created. (Required Navigation specific)
*                 -14 = Document could not be made because spatialReferenceInfo could not be created. (Required Navigation specific)
*                 -15 = Document could not be made because referenceSystemInfo could not be created. (Required Navigation specific)
*                 -16 = Document could not be made because language node could not be created. (Required Navigation specific)
*                 -17 = Document could not be made because contact node could not be created. (Required by ISO 19139)
*                 -18 = Document could not be made because dateStamp node could not be created. (Required Navigation specific)
*                 -19 = Document could not be made because metadataStandardName or Version could not be created. (Navigation specific)
*                 -20 = An exception occurred while attempitn to create XML document.
*
* Assumptions: Assumes one "dataIdentificationInfo" node, one "spatialRepresentationInfoNode", one "referenceSystemInfo" node, one "contact" node.
*              Assumes one metadataConstraints node for LegalConstraints and one metadataConstraints node for SecurityConstraints.
*              Assumes a creationDate is supplied.    
*
* Notes:       Creates nodes "language" as en(English),  "metadataStandardName" as ISO 19139 and "metadataStandardVersion" as  1.1.0.  XML encoding attribute is set as  UTF-8.  
*              Memory for xmlString is allocated within this method and must freed by the calling program after the method call.         
*
*******************************************************************************************************/
 </pre>

<BR><BR><BR>
<A NAME="SetIdentificationInfo"></A>
<pre>


NV_INT32 SetIdentificationInfo(IDENTIFICATION_INFO newIdentificationInfo, 
                               NV_U_CHAR ** xmlString);


/******************************************************************************************************
*
* Function: SetIdentificationInfo
*
* Purpose:  Replaces an existing IdentificationInfo node in a BAG metadata XML string.
*
* Inputs:   newIdentificationInfo - structure containing IdentificationInfo information that should be added or used as a replacement 
*           xmlString - address of the XML string to alter.        
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                 -4 = Could not make node from information supplied in newIdentificationInfo.
*                -11 = Can't find node to replace.
*                -20 = An exception occurred while attempting to set identification info.
*
* Assumptions:  The supplied XML string is well-formed.
*
*
* Notes:        Currently the library supports only occurrence of the identificationInfo node.  In the future this method may be expanded to allow multiple nodes of this type.  
*
*******************************************************************************************************/
</pre>

<BR><BR><BR>
<A NAME="SetLegalConstraints"></A>
<pre>


NV_INT32 SetLegalConstraints(MD_LEGAL_CONSTRAINTS newLegalConstraints,
                             NV_U_CHAR ** xmlString);


/******************************************************************************************************
*
* Function: SetLegalConstraints
*
* Purpose:  Replaces an existing legal constraint in the BAG metadata.
*
* Inputs:   newLegalConstraints - structure containing contact information that should be added or used as a replacement 
*           xmlString - address of the XML string to alter.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                -11 = Can't find node to replace.
*                -20 = An exception occurred while attempting to set legal constraints.
*
* Assumptions:  The supplied XML string is well-formed.
*
*
* Notes:        Currently the library supports only occurrence of the identificationInfo node.
*               In the future this method may be expanded to allow multiple nodes of this type.  
*
*******************************************************************************************************/

</pre>


<BR><BR><BR>
<A NAME="SetSecurityConstraints"></A>
<pre>


NV_INT32 SetSecurityConstraints(MD_SECURITY_CONSTRAINTS newSecurityConstraints,  
                                  NV_U_CHAR ** xmlString);


/******************************************************************************************************
*
* Function: SetSecurityConstraints
*
* Purpose:  Replaces an existing security constraint in the BAG metadata.
*
* Inputs:   newSecurityConstraints - structure containing Security Constraint information that should be added or used as a replacement 
*           xmlString - address of the XML string to alter.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                -11 = Can't find node to replace.
*                -20 = An exception occurred while attempting to set security constraints.
*
* Assumptions:  The supplied XML string is well-formed.
*
*               For the purpose of replacing oldSecurityConstraints with newSecurityConstraints, it is assumed that the supplied XML string is 
*               well-formed, valid XML.
* 
* Notes:        XML is constrained to contain only one MD_SecurityConstraints node.
*               In the future this method may be expanded to allow multiple nodes of this type. 
*
*******************************************************************************************************/
</pre>

<A NAME="SetDataQualityInfo"></A>
<pre>


NV_INT32 SetDataQualityInfo(DATA_QUALITY_INFO newDataQualityInfo,   
                            NV_U_CHAR ** xmlString);



/******************************************************************************************************
*
* Function: SetDataQualityInfo
*
* Purpose:  Replaces an existing dataQualityInfo node in the BAG metadata.
*
* Inputs:   newDataQualityInfo - structure containing DataQualityInfo information that should be added or used as a replacement 
*           xmlString - address of the XML string to alter.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                -11 = Can't find node to add.
*                -20 = An exception occurred while trying to set the dataQualityInfo node.
*       
* Assumptions:  The supplied XML string is well-formed.
*
*
* Notes:        XML is constrained to contain only one dataQualityInfo node.
*               In the future this method may be expanded to allow multiple nodes of this type. 
*                 
*
*******************************************************************************************************/


</pre>
<BR><BR><BR>
<A NAME="SetReferenceSystemInfo"></A>
<pre>


NV_INT32 SetReferenceSystemInfo(REFERENCE_SYSTEM_INFO newIdentificationInfo, 
                                NV_U_CHAR ** xmlString);   

                            
/******************************************************************************************************
*
* Function: SetReferenceSystemInfo
*
* Purpose:  Replaces an existing referenceSystemInfo in the BAG metadata XML string.
*
* Inputs:   newReferenceSystemInfo - structure containing referenceSystemInfo information that should be added or used as a replacement 
*           xmlString - address of the XML string to alter.

* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                -10 = Problem creating one or both referenceSystemInfo nodes.                  
*                -11 = Can't find node to replace.
*                -20 = An exception occurred while attempting to set referenceSystemInfo
*
*
* Assumptions:  The supplied XML string is well-formed.
*
* Notes:        XML is constrained to contain only two referenceSystemInfo nodes.  One for horizontal datum, etc.  The second node is for vertical datum only,
*               In the future this method may be expanded to allow more than two nodes of this type. 
*
*******************************************************************************************************/
</pre>



<A NAME="SetSpatialRepresentationInfo"></A>
<pre>


NV_INT32 SetSpatialRepresentationInfo(SPATIAL_REPRESENTATION_INFO newSpatialRepresentationInfo, 
                                      NV_U_CHAR ** xmlString);


/******************************************************************************************************
*
* Function: SetSpatialRepresentationInfo
*
* Purpose:  Replaces an existing spatialRepresentationInfo in the BAG metadata.
*
* Inputs:   newSpatialRepresentationInfo - structure containing spatialRepresentationInfo that should be added or uses a replacement 
*           xmlString - address of the XML string to alter.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                -11 = Can't find node to add.
*                -20 = An exception occurred while attempting to set spatialRepresentationInfo.
*                  
* Assumptions:  The supplied XML string is well-formed.
*.
*
* Notes:       XML is constrained to contain only one spatialRepresentationInfo node.
*              In the future this method may be expanded to allow multiple nodes of this type. 
*
*******************************************************************************************************/

</pre>
<BR><BR><BR>
<A NAME="SetLanguage"></A>
<pre>


NV_INT32 SetLanguage(NV_CHAR * newLanguage,  
                     NV_U_CHAR ** xmlString);
                     
                     
/******************************************************************************************************
*
* Function: SetLanguage
*
* Purpose:  Adds the upper level "language" node or replaces it in the BAG metadata XML string.
*
* Inputs:   newLanguage - string containing language that should be added or used as a replacement. 
*           xmlString   - address of the XML string to alter.
*
*           If language node is present, value will be changed to reflect language specifed.
*           If language node is NOT present, language node will be added.
*
* Outputs:     Error messages to stderr.
*
* Returns:     NV_INT32 = Length of XML string created (if successful). 
*                    -1 = Error initializing XERCES
*                    -2 = A DOMException occurred.
*                    -3 = Out of memory
*                   -20 = An exception occurred while attempting to the langauge.
*        
* Assumptions:  For purpose of adding a newLanguage, it is assumed that 
*               1) previous sibling nodes of "language" node exist and that following sibling nodes do not exist. 
*				2) the supplied XML string is well-formed.
*
*               For the purpose of replacing the language node,  it is assumed that the supplied XML string is 
*               well-formed, valid XML.          
*
*******************************************************************************************************/
NV_INT32 SetLanguage(NV_CHAR * newLanguage,  </pre>

<BR><BR><BR>
<A NAME="SetDateStamp"></A>
<pre>

NV_INT32 SetDateStamp(NV_CHAR * newDateStamp,  
                     NV_U_CHAR ** xmlString);
                     
                     
/******************************************************************************************************
*
* Function: SetDateStamp
*
* Purpose:  Adds the upper level "dateStamp" node or replaces it in the BAG metadata XML string.
*
* Inputs:   newDateStamp - string containing dateStamp that should be added or used as a replacement. 
*           xmlString   - address of the XML string to alter.
*
*           If dateStamp node is present, value will be changed to reflect dateStamp specifed.
*           If dateStamp node is NOT present, dateStamp node will be added.
*
* Outputs:     Error messages to stderr.
*
* Returns:     NV_INT32 = Length of XML string created (if successful). 
*                    -1 = Error initializing XERCES
*                    -2 = A DOMException occurred.
*                    -3 = Out of memory
*                   -20 = An exception occurred while attempting to the langauge.
*        
* Assumptions:  For purpose of adding a newDateStamp, it is assumed that 
*               1) previous sibling nodes of "dateStamp" node exist and that following sibling nodes do not exist. 
*				2) the supplied XML string is well-formed.
*
*               For the purpose of replacing the dateStamp node,  it is assumed that the supplied XML string is 
*               well-formed, valid XML.          
*
*******************************************************************************************************/
</pre>

<BR><BR><BR>
<A NAME="SetContact"></A>
<pre>

NV_INT32 SetContact(RESPONSIBLE_PARTY newContact, NV_U_CHAR ** xmlString);


/******************************************************************************************************
*
* Function: SetContact
*
* Purpose:  Replaces the existing contact in the BAG metadata XML string.
*
* Inputs:   newContact - structure containing contact information that should be used as a replacement contact.
*           xmlString  - address of the BAG metadata XML string to alter.
*
*
* Outputs:      Error messages to stderr.
*
* Returns:      NV_INT32 = Length of XML string created (if successful). 
*                     -1 = Error initializing XERCES
*                     -2 = A DOMException occurred.
*                     -3 = Out of memory
*                    -10 = Could not create new CI_ResponsiblePary node. Make sure the "role" field has been specified in newContact.
*                    -11 = Can't find node to replace.
*                    -20 = an exception occurred while attempting to set the contact node.
*
* Assumptions:  It is assumed that the supplied XML string is 
*               well-formed, valid XML.  
*
* Notes:        Currently the existence of one and only one contact node supported. In the future this method may be expanded to allow multiple "contact" nodes.  
*
*******************************************************************************************************/

</pre>

<A NAME="SetMetadataStandardName"></A>
<pre>
/******************************************************************************************************
*
* Function: SetMetadataStandardName
*
* Purpose:  Adds the upper level "metadataStandardName" node or replaces it in the BAG metadata.
*
* Inputs:   newMetadataStandardName - string containing Metadata Standard Name that should be added or used as a replacement. 
*           xmlString   - address of the XML string to alter.
*
*           If metadataStandardName node is present, value will be changed to reflect metadataStandardName specifed.
*           If metadataStandardName node is NOT present, metadataStandardName node will be added.
*           Only one metadataStandardName is allowed.
*
* Outputs:      Error messages to stderr.
*
* Returns:      NV_INT32 = Length of XML string created (if successful). 
*                     -1 = Error initializing XERCES
*                     -2 = A DOMException occurred.
*                     -3 = Out of memory
*                    -20 = An exception occurred while attempting to set metadataStandardName. 
*             
* Assumptions:  For purpose of adding a newMetadataStandardName, it is assumed that 
*               1) previous sibling nodes of "metadataStandardName" node exist and that following sibling nodes do not exist. 
*				2) the supplied XML string is well-formed.
*
*               For the purpose of replacing the metadataStandardName node,  it is assumed that the supplied XML string is 
*               well-formed, valid XML.     
*
*******************************************************************************************************/
</pre>

<BR><BR><BR>
<A NAME="SetMetadataStandardVersion"></A>
<pre>

NV_INT32 SetMetadataStandardVersion(NV_CHAR * newMetadataStandardVersion,  
                                    NV_U_CHAR ** xmlString);
                                    
                                    
/******************************************************************************************************
*
* Function: SetMetadataStandardVersion
*
* Purpose:  Adds the upper level "metadataStandardVersion" node or replaces it in the BAG metadata XML string.
*
* Inputs:   newMetadataStandardVersion - string containing Metadata Standard Version  that should be added or used as a replacement. 
*           xmlString   - address of the XML string to alter.
*
*           If metadataStandardVersion node is present, value will be changed to reflect metadataStandardVersion specifed.
*           If metadataStandardVersion node is NOT present, metadataStandardVersion node will be added.
*           Only one metadataStandardVersion is allowed.
*
* Outputs:  Error messages to stderr.
*
* Returns:  NV_INT32 = Length of XML string created (if successful). 
*                 -1 = Error initializing XERCES
*                 -2 = A DOMException occurred.
*                 -3 = Out of memory
*                 -20 = an exception occurred while attempting to set metadataStandardVersion.
*                  
*
* Assumptions:  For purpose of adding a newMetadataStandardVersion, it is assumed that 
*               1) previous sibling nodes of "metadataStandardVersion" node exist. 
*               2) the supplied XML string is well-formed.
*
*               For the purpose of replacing the metadataStandardVersion node,  it is assumed that the supplied XML string is 
*               well-formed, valid XML.
*
*******************************************************************************************************/
</pre>


<BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<A NAME="Initialize"></A>
<STRONG><FONT SIZE=4>Methods to initialize data structures are listed below. 
</STRONG>
<BR>
<BR>All integers and floats are initialized to the INIT_VALUE (-999).  All strings are intialized to an empty string.
<BR>___________________________________________________________________________________________________
<BR>

<BR>NV_INT16 InitDataIdentificationInfo(<A href="#IDENTIFICATION_INFO">IDENTIFICATION_INFO</A> * dataIdentificationInfo);
<BR>
<BR>NV_INT16 InitLegalConstraints(<A href="#MD_LEGAL_CONSTRAINTS">MD_LEGAL_CONSTRAINTS</A> * legalConstraints);
<BR>
<BR>NV_INT16 InitSecurityConstraints(<A href="#MD_SECURITY_CONSTRAINTS">MD_SECURITY_CONSTRAINTS</A> * securityConstraints);
<BR>
<BR>NV_INT16 InitDataQualityInfo(<A href="#DATA_QUALITY_INFO">DATA_QUALITY_INFO</A> * dataQualityInfo);
<BR>
<BR>NV_INT16 InitReferenceSystemInfo(<A href="#REFERENCE_SYSTEM_INFO">REFERENCE_SYSTEM_INFO</A> * referenceSystemInfo);
<BR>
<BR>NV_INT16 InitSpatialRepresentationInfo(<A href="#SPATIAL_REPRESENTATION_INFO">SPATIAL_REPRESENTATION_INFO</A> * spatialRepresentationInfo);
<BR>
<BR>NV_INT16 InitResponsibleParty(<A href="#RESPONSIBLE_PARTY">RESPONSIBLE_PARTY</A> * responsibleParty);
<BR>
<BR><BR><BR>
<BR><BR><BR><BR>


<STRONG>
<A NAME="Free"></A>
Methods to free dynamically allocated memory are listed below.
</A>
</STRONG>

<BR>___________________________________________________________________________________________________
<BR><A NAME="FreeDataQualityInfo"/>

<BR>NV_INT16  FreeDataQualityInfo(<A href="#DATA_QUALITY_INFO">DATA_QUALITY_INFO</A> * dataQuality );
<BR><BR><BR><BR>
<BR>

<pre>
/******************************************************************************************************
*
* Function: FreeDataQualityInfo
*
* Purpose:  Free resources that were allocated while reading a DATA_QUALITY_INFO structure.
*
* Inputs:   dataQuality - pointer to object to free.
*
* Returns:  1 = success
*          -1 = not successful.  An exception was encountered.
*
* Notes:  This method should be called after calling getDataQualityInfo.  
*         Specifically, it should be called when a program no longer needs the metadata in the 
*         DATA_QUALITY_INFO structure which was obtained by calling GetDataQualityInfo.
*
*******************************************************************************************************/
</pre>
<BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR>


<A NAME="Print"></A>
<STRONG><FONT SIZE=4>Methods to print data structures are listed below. 
<BR></STRONG>___________________________________________________________________________________________________
<BR>

<BR>void PrintIdentificationInfo(<A href="#IDENTIFICATION_INFO">IDENTIFICATION_INFO</A> identificationInfo);
<BR>
<BR>void PrintLegalConstraints(<A href="#MD_LEGAL_CONSTRAINTS">MD_LEGAL_CONSTRAINTS</A> legalConstraints);
<BR>
<BR>void PrintSecurityConstraints(<A href="#MD_SECURITY_CONSTRAINTS">MD_SECURITY_CONSTRAINTS</A> securityConstraints);
<BR>
<BR>void PrintDataQuality(<A href="#DATA_QUALITY_INFO">DATA_QUALITY_INFO</A> dataQuality);
<BR>
<BR>void PrintSpatialRepresentationInfo(<A href="#SPATIAL_REPRESENTATION_INFO">SPATIAL_REPRESENTATION_INFO</A> spatialRepresentationInfo);
<BR>
<BR>void PrintReferenceSystemInfo(<A href="#REFERENCE_SYSTEM_INFO">REFERENCE_SYSTEM_INFO</A> referenceSystemInfo);
<BR>
<BR>void PrintContact(<A href="#RESPONSIBLE_PARTY">RESPONSIBLE_PARTY</A> contact); 

<BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR><BR><BR>
<BR><BR>

<A NAME="DataStructures"></A>
<FONT SIZE=4>
<STRONG>
Metadata structures are listed below.
</STRONG>
<BR>
<BR>Structures that are required in the BAG XML metadata are marked as such.
<BR>___________________________________________________________________________________________________
<BR>

<pre>

<A HREF="#IDENTIFICATION_INFO">IDENTIFICATION_INFO</A>         /* REQUIRED */ Corresponds to smXML:MD_Metadata.identificationInfo
<A HREF="#MD_LEGAL_CONSTRAINTS">MD_LEGAL_CONSTRAINTS</A>        /* REQUIRED */ Corresponds to smXML:MD_Metadata.metadataConstraints.smXML:MD_LegalConstraints
<A HREF="#MD_SECURITY_CONSTRAINTS">MD_SECURITY_CONSTRAINTS</A>     /* REQUIRED */ Corresponds to smXML:MD_Metadata.metadataConstraints.smXML:MD_SecurityConstraints
<A HREF="#DATA_QUALITY_INFO">DATA_QUALITY_INFO</A>           /* REQUIRED */ Corresponds to smXML:MD_Metadata.dataQualityInfo
<A HREF="#SOURCE_INFO">SOURCE_INFO</A>                                Corresponds to smXML:MD_Metadata.dataQualityInfo.lineage.smXML:LI_Lineage.source
<A HREF="#PROCESS_STEP_INFO">PROCESS_STEP_INFO</A>                          Corresponds to smXML:MD_Metadata.dataQualityInfo.lineage.smXML:LI_Lineage.processStep
<A HREF="#RESPONSIBLE_PARTY">RESPONSIBLE_PARTY</A>                          Corresponds to smXML:CI_ResponsibleParty node
<A HREF="#SPATIAL_REPRESENTATION_INFO">SPATIAL_REPRESENTATION_INFO</A> /* REQUIRED */ Corresponds to smXML:MD_Metadata.spatialRepresentationInfo
<A HREF="#REFERENCE_SYSTEM_INFO">REFERENCE_SYSTEM_INFO</A>       /* REQUIRED */ Corresponds to smXML:MD_Metadata.referenceSystemInfo

</pre>


<STRONG>
<BR>
<BR>
<BR>
<BR>
Metadata structure details are listed below.
</STRONG>
<BR>___________________________________________________________________________________________________
<BR>
<pre>
<A NAME="IDENTIFICATION_INFO"/>
/* REQUIRED */
<pre>
typedef struct
{

    NV_CHAR             title[100];                     /* OPTIONAL: but this field is required in order to make a citation.     */
    NV_CHAR             date[20];                       /* OPTIONAL: but this field is required in order to make a citation date */
    NV_CHAR             dateType[20];                   /* OPTIONAL: but this field is required in order to make a citation date */
    <A HREF="#RESPONSIBLE_PARTY"/>RESPONSIBLE_PARTY</A>   responsibleParties[<A HREF="#MAX_CI_RESPONSIBLE_PARTIES"/>MAX_CI_RESPONSIBLE_PARTIES</A>];      /* OPTIONAL                                         */

    NV_CHAR             abstract[8000];                 /* REQUIRED                                                              */
    NV_CHAR             purpose[100];                   
    NV_CHAR             status[100];                   
    NV_CHAR             spatialRepresentationType[100]; /* OPTIONAL: For Nav Spec, this should be set to "grid".                  */
    NV_CHAR             language[100];                  /* REQUIRED: For Nav Spec, this should be set to "en"                     */
    NV_CHAR             topicCategory[100];             /* REQUIRED: For Nav Spec, this should be set to "grid"                   */
    NV_FLOAT64          westBoundingLongitude;          /* OPTIONAL: but this field is required in order to make an extent.       */
    NV_FLOAT64          eastBoundingLongitude;          /* OPTIONAL: but this field is required in order to make an extent.       */
    NV_FLOAT64          southBoundingLatitude;          /* OPTIONAL: but this field is required in order to make an extent.       */
    NV_FLOAT64          northBoundingLatitude;          /* OPTIONAL: but this field is required in order to make an extent.       */
    NV_CHAR             verticalUncertaintyType[40];    /* REQUIRED                                                               */
    NV_CHAR             depthCorrectionType[32];        /* Navigation specific */

} IDENTIFICATION_INFO;




<A NAME="MD_LEGAL_CONSTRAINTS"/>
typedef struct
{
    NV_CHAR             useConstraints[40];
    NV_CHAR             otherConstraints[100];          /* OPTIONAL: For Nav Spec, this should be set to "grid".                  */
}   MD_LEGAL_CONSTRAINTS;





<A NAME="MD_SECURITY_CONSTRAINTS"/>
/* REQUIRED structure Navigation Specific */

typedef struct
{
    NV_CHAR            classification[40];             /* REQUIRED   */
    NV_CHAR            userNote[4000];                 /* REQUIRED: Contains distribution, declass authority, declass date.   */

} MD_SECURITY_CONSTRAINTS;



<A NAME="DATA_QUALITY_INFO"/>

/* REQUIRED: Navigation Specific */

typedef struct
{

    NV_CHAR            scope[100];                   /* Navigation specific: always set to "dataset"                 */
    <A HREF="#SOURCE_INFO">SOURCE_INFO</A>        * lineageSources;             /* REQUIRED: Navigation specific, require at least 1 as scope is set to 'dataset'        */
    NV_INT16           numberOfSources;              /* REQUIRED: Navigation specific */
    <A HREF="#PROCESS_STEP_INFO">PROCESS_STEP_INFO</A>   * lineageProcessSteps;       /* REQUIRED: Navigation specific, require at least 1 as scope is set to 'dataset'        */
    NV_INT16           numberOfProcessSteps;         /* REQUIRED: Navigation specific */

} DATA_QUALITY_INFO;




<A NAME="SOURCE_INFO"/>
/* OPTIONAL */

typedef struct
{
    NV_CHAR            description[200];      /* REQUIRED: Navigation Specific required if source is desired.          */
    NV_CHAR            title[100];            /* OPTIONAL: but this field is required if a citation is desired.        */
    NV_CHAR            date[20];              /* OPTIONAL: but this field is required if a citation date is desired.   */
    NV_CHAR            dateType[20];          /* OPTIONAL: but this field is required if a citation date is desired.   */
    <A HREF="#RESPONSIBLE_PARTY"/>RESPONSIBLE_PARTY</A>  responsibleParties[<A HREF="#MAX_CI_RESPONSIBLE_PARTIES"/>MAX_CI_RESPONSIBLE_PARTIES</A>];   /* Placeholder.  Not implemented yet.         */

} SOURCE_INFO;




<A NAME="PROCESS_STEP_INFO"/>
/* OPTIONAL */

typedef struct
{
    NV_CHAR            description[200];                          /* REQUIRED  */
    NV_CHAR            dateTime[21];
    <A HREF="#RESPONSIBLE_PARTY"/>RESPONSIBLE_PARTY</A>  processors[<A HREF="#MAX_CI_RESPONSIBLE_PARTIES"/>MAX_CI_RESPONSIBLE_PARTIES</A>];
    NV_CHAR            trackingId[5];                             /* REQUIRED  */

} PROCESS_STEP_INFO;


<A NAME="SPATIAL_REPRESENTATION_INFO"/>
/* REQUIRED: Navigation Specific */

typedef struct
{

    NV_INT16          numberOfDimensions;                        /* REQUIRED */
    NV_CHAR           dimensionName[3][20];                      /* REQUIRED: Navigation specific */
    NV_INT32          dimensionSize[3];                          /* REQUIRED: Navigation specific */
    NV_FLOAT64        resolutionValue[3];                        /* REQUIRED: Navigation specific */
    NV_CHAR           cellGeometry[10];                          /* REQUIRED: Nav Spec should always set this to "point"             */
    NV_CHAR           transformationParameterAvailability[6];    /* REQUIRED: Nav Spec should always set this to "false"             */
    NV_CHAR           checkPointAvailability[2];                 /* REQUIRED: Nav Spec should always set this to 0 indicating false. */
    NV_FLOAT64        llCornerX;                                
    NV_FLOAT64        llCornerY;                                 
    NV_FLOAT64        urCornerX;                              
    NV_FLOAT64        urCornerY;                            

} SPATIAL_REPRESENTATION_INFO;                            



<A NAME="REFERENCE_SYSTEM_INFO"/>
/* REQUIRED:  Navigation Specific */

typedef struct
{

    NV_CHAR           projection[100];                      /* REQUIRED Navigation Specific */
    NV_CHAR           ellipsoid[100];                       /* REQUIRED Navigation Specific */
    NV_CHAR           horizontalDatum[100];                 /* REQUIRED Navigation Specific */
    NV_INT16          zone;                                
    NV_FLOAT64        standardParallel;                 
    NV_FLOAT64        longitudeOfCentralMeridian;        
    NV_FLOAT64        latitudeOfProjectionOrigin;       
    NV_FLOAT64        falseEasting;                      
    NV_FLOAT64        falseNorthing;                     
    NV_FLOAT64        scaleFactorAtEquator;                 
    NV_FLOAT64        heightOfProspectivePointAboveSurface; 
    NV_FLOAT64        longitudeOfProjectionCenter;        
    NV_FLOAT64        latitudeOfProjectionCenter;        
    NV_FLOAT64        scaleFactorAtCenterLine;            
    NV_FLOAT64        straightVerticalLongitudeFromPole;   
    NV_FLOAT64        scaleFactorAtProjectionOrigin;       
    NV_FLOAT64        semiMajorAxis;                      
    NV_CHAR           verticalDatum[100];                   /* REQUIRED Navigation Specific */

} REFERENCE_SYSTEM_INFO;





<A NAME="INIT_VALUE"/>
/* Value to which floats and ints will be initialized. */
#define INIT_VALUE  -999    





<A NAME="MAX_CI_RESPONSIBLE_PARTIES"/>
/* Maximum number of parties that can be stored for citations. */
#define MAX_CI_RESPONSIBLE_PARTIES 10






<A NAME="RESPONSIBLE_PARTY"/>
/* OPTIONAL */

typedef struct
{

    NV_CHAR             individualName[100];            /* REQUIRED: One of the following must be supplied: individualName,organisationName, positionName. */  
    NV_CHAR             organisationName[100];
    NV_CHAR             positionName[100];
    NV_CHAR             phoneNumber[17];
    NV_CHAR             role[100];                      /* REQUIRED                                                                                        */

} RESPONSIBLE_PARTY;

</pre>

</BODY>
</HTML>
