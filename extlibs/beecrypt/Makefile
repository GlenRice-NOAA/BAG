#############################################################################
# Makefile for building: libbeecrypt.a
# Generated by qmake (1.07a) (Qt 3.3.3) on: Mon Jul 18 18:50:28 2005
# Project:  beecrypt.pro
# Template: lib
# Command: $(QMAKE) -o Makefile_linux beecrypt.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe ${IVSCOPTS} -w -g  -DBEE_STATIC -DQT_SHARED -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
CXXFLAGS = -pipe ${IVSCCOPTS2} -w -g  -DBEE_STATIC -DQT_SHARED -DQT_NO_DEBUG -DQT_THREAD_SUPPORT
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I/usr/local/qt/mkspecs/linux-g++ -I. -I$(QTDIR)/include -I.ui/ -I.moc/$(HOSTMACHINE)/
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY)
COPY_DIR = $(COPY) -r
INSTALL_FILE= $(COPY_FILE)
INSTALL_DIR = $(COPY_DIR)
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = 

####### Files

HEADERS = aes.h \
		aesopt.h \
		aes_be.h \
		aes_le.h \
		api.h \
		base64.h \
		beecrypt.h \
		blockmode.h \
		blockpad.h \
		blowfish.h \
		blowfishopt.h \
		dhaes.h \
		dldp.h \
		dlkp.h \
		dlpk.h \
		dlsvdp-dh.h \
		dsa.h \
		elgamal.h \
		endianness.h \
		entropy.h \
		fips186.h \
		gnu.h \
		hmac.h \
		hmacmd5.h \
		hmacsha1.h \
		hmacsha256.h \
		md5.h \
		memchunk.h \
		mp.h \
		mpbarrett.h \
		mpnumber.h \
		mpopt.h \
		mpprime.h \
		mtprng.h \
		pkcs1.h \
		pkcs12.h \
		rsa.h \
		rsakp.h \
		rsapk.h \
		sha1.h \
		sha1opt.h \
		sha256.h \
		timestamp.h \
		win.h
SOURCES = aes.c \
		base64.c \
		beecrypt.c \
		blockmode.c \
		blockpad.c \
		blowfish.c \
		dhaes.c \
		dldp.c \
		dlkp.c \
		dlpk.c \
		dlsvdp-dh.c \
		dsa.c \
		elgamal.c \
		endianness.c \
		entropy.c \
		fips186.c \
		hmac.c \
		hmacmd5.c \
		hmacsha1.c \
		hmacsha256.c \
		md5.c \
		memchunk.c \
		mp.c \
		mpbarrett.c \
		mpnumber.c \
		mpprime.c \
		mtprng.c \
		rsa.c \
		rsakp.c \
		rsapk.c \
		sha1.c \
		sha256.c \
		timestamp.c
OBJECTS = aes.o \
		base64.o \
		beecrypt.o \
		blockmode.o \
		blockpad.o \
		blowfish.o \
		dhaes.o \
		dldp.o \
		dlkp.o \
		dlpk.o \
		dlsvdp-dh.o \
		dsa.o \
		elgamal.o \
		endianness.o \
		entropy.o \
		fips186.o \
		hmac.o \
		hmacmd5.o \
		hmacsha1.o \
		hmacsha256.o \
		md5.o \
		memchunk.o \
		mp.o \
		mpbarrett.o \
		mpnumber.o \
		mpprime.o \
		mtprng.o \
		rsa.o \
		rsakp.o \
		rsapk.o \
		sha1.o \
		sha256.o \
		timestamp.o \
		mp-asm/blowfishopt.obj \
		mp-asm/mpopt.obj \
		mp-asm/sha1opt.obj
FORMS = 
UICDECLS = 
UICIMPLS = 
SRCMOC   = 
OBJMOC = 
DIST	   = ../libincludes.pro \
		../libmaster.pro \
		beecrypt.pro

DESTDIR  = ../lib/$(HOSTMACHINE)/
TARGET   = libbeecrypt.a

first: all
####### Implicit rules

.SUFFIXES: .c .o .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile_linux ../lib/$(HOSTMACHINE)/$(TARGET) 

staticlib: ../lib/$(HOSTMACHINE)/$(TARGET)

../lib/$(HOSTMACHINE)/$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) $(OBJCOMP) 
	test -d ../lib/$(HOSTMACHINE)/ || mkdir -p ../lib/$(HOSTMACHINE)/
	-$(DEL_FILE) $(TARGET)
	$(AR) $(TARGET) $(OBJECTS) $(OBJMOC)
	-$(DEL_FILE) ../lib/$(HOSTMACHINE)/$(TARGET)
	-$(MOVE) $(TARGET) ../lib/$(HOSTMACHINE)/


mocables: $(SRCMOC)
uicables: $(UICDECLS) $(UICIMPLS)

$(MOC): 
	( cd $(QTDIR)/src/moc && $(MAKE) )


dist: 
	@mkdir -p beecrypt && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) beecrypt/ && ( cd `dirname beecrypt` && $(TAR) beecrypt.tar beecrypt && $(GZIP) beecrypt.tar ) && $(MOVE) `dirname beecrypt`/beecrypt.tar.gz . && $(DEL_FILE) -r beecrypt

mocclean:

uiclean:

yaccclean:
lexclean:
clean:
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) ../lib/$(HOSTMACHINE)/$(TARGET) $(TARGET)


FORCE:

####### Compile

aes.o: aes.c aes.h \
		aes_be.h \
		aes_le.h \
		beecrypt.h \
		aesopt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o aes.o aes.c

base64.o: base64.c base64.h \
		endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o base64.o base64.c

beecrypt.o: beecrypt.c beecrypt.h \
		entropy.h \
		fips186.h \
		mtprng.h \
		md5.h \
		sha1.h \
		sha256.h \
		hmacmd5.h \
		hmacsha1.h \
		hmacsha256.h \
		aes.h \
		blowfish.h \
		blockmode.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h \
		beecrypt.h \
		sha1.h \
		sha1opt.h \
		hmac.h \
		aesopt.h \
		blowfishopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o beecrypt.o beecrypt.c

blockmode.o: blockmode.c blockmode.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o blockmode.o blockmode.c

blockpad.o: blockpad.c blockpad.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o blockpad.o blockpad.c

blowfish.o: blowfish.c blowfish.h \
		endianness.h \
		beecrypt.h \
		blowfishopt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o blowfish.o blowfish.c

dhaes.o: dhaes.c dhaes.h \
		dlsvdp-dh.h \
		blockmode.h \
		blockpad.h \
		beecrypt.h \
		dldp.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h \
		mpbarrett.h \
		dlkp.h \
		dlpk.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dhaes.o dhaes.c

dldp.o: dldp.c dldp.h \
		mp.h \
		mpprime.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dldp.o dldp.c

dlkp.o: dlkp.c dlkp.h \
		dlpk.h \
		dldp.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dlkp.o dlkp.c

dlpk.o: dlpk.c dlpk.h \
		dldp.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dlpk.o dlpk.c

dlsvdp-dh.o: dlsvdp-dh.c dlsvdp-dh.h \
		dldp.h \
		dlkp.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h \
		dlpk.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dlsvdp-dh.o dlsvdp-dh.c

dsa.o: dsa.c dsa.h \
		dldp.h \
		dlkp.h \
		dlpk.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o dsa.o dsa.c

elgamal.o: elgamal.c elgamal.h \
		dldp.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o elgamal.o elgamal.c

endianness.o: endianness.c endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o endianness.o endianness.c

entropy.o: entropy.c entropy.h \
		endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o entropy.o entropy.c

fips186.o: fips186.c fips186.h \
		beecrypt.h \
		beecrypt.h \
		sha1.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h \
		sha1opt.h \
		sha1.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o fips186.o fips186.c

hmac.o: hmac.c hmac.h \
		endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hmac.o hmac.c

hmacmd5.o: hmacmd5.c hmacmd5.h \
		hmac.h \
		md5.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hmacmd5.o hmacmd5.c

hmacsha1.o: hmacsha1.c hmacsha1.h \
		hmac.h \
		sha1.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h \
		sha1opt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hmacsha1.o hmacsha1.c

hmacsha256.o: hmacsha256.c hmacsha256.h \
		hmac.h \
		sha256.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hmacsha256.o hmacsha256.c

md5.o: md5.c md5.h \
		endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o md5.o md5.c

memchunk.o: memchunk.c memchunk.h \
		api.h \
		win.h \
		gnu.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o memchunk.o memchunk.c

mp.o: mp.c mp.h \
		mpopt.h \
		api.h \
		win.h \
		gnu.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o mp.o mp.c

mpbarrett.o: mpbarrett.c beecrypt.h \
		mpprime.h \
		mpnumber.h \
		mpbarrett.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o mpbarrett.o mpbarrett.c

mpnumber.o: mpnumber.c mpnumber.h \
		mp.h \
		api.h \
		mpopt.h \
		win.h \
		gnu.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o mpnumber.o mpnumber.c

mpprime.o: mpprime.c mpprime.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o mpprime.o mpprime.c

mtprng.o: mtprng.c mtprng.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o mtprng.o mtprng.c

rsa.o: rsa.c rsa.h \
		rsakp.h \
		rsapk.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o rsa.o rsa.c

rsakp.o: rsakp.c rsakp.h \
		mpprime.h \
		rsapk.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o rsakp.o rsakp.c

rsapk.o: rsapk.c rsapk.h \
		mpbarrett.h \
		beecrypt.h \
		mpnumber.h \
		api.h \
		memchunk.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o rsapk.o rsapk.c

sha1.o: sha1.c sha1.h \
		endianness.h \
		beecrypt.h \
		sha1opt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sha1.o sha1.c

sha256.o: sha256.c sha256.h \
		endianness.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o sha256.o sha256.c

timestamp.o: timestamp.c timestamp.h \
		beecrypt.h \
		api.h \
		memchunk.h \
		mpnumber.h \
		win.h \
		gnu.h \
		mp.h \
		mpopt.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o timestamp.o timestamp.c

####### Install

install:  

uninstall:  

